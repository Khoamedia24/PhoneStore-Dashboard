@model PhoneStore.Models.Product
@{
    ViewData["Title"] = "Chỉnh sửa sản phẩm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4 pb-10">
    <div class="max-w-5xl mx-auto">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-800">Chỉnh sửa sản phẩm</h2>
            <a href="/Product" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Quay lại danh sách
            </a>
        </div>

        @if (TempData["Success"] != null)
        {
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
                <span class="block sm:inline">@TempData["Success"]</span>
            </div>
        }

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4">
                <ul>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }

        <form asp-action="Edit" asp-route-id="@Model.ProductId" method="post" enctype="multipart/form-data" id="productForm" class="space-y-6">
            <input type="hidden" asp-for="ProductId" />
            
            <div class="bg-white rounded-lg shadow-md p-6">
                <h3 class="text-xl font-semibold text-gray-800 mb-4">Thông tin cơ bản</h3>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label asp-for="ProductName" class="block text-sm font-medium text-gray-700 mb-2">Tên sản phẩm</label>
                        <input asp-for="ProductName" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <span asp-validation-for="ProductName" class="text-sm text-red-600"></span>
                    </div>

                    <div>
                        <label asp-for="CategoryId" class="block text-sm font-medium text-gray-700 mb-2">Danh mục</label>
                        <select asp-for="CategoryId" asp-items="ViewBag.Categories" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">-- Chọn danh mục --</option>
                        </select>
                        <span asp-validation-for="CategoryId" class="text-sm text-red-600"></span>
                    </div>

                    <div>
                        <label asp-for="Price" class="block text-sm font-medium text-gray-700 mb-2">Giá (₫)</label>
                        <input asp-for="Price" type="number" min="0" step="1000" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <span asp-validation-for="Price" class="text-sm text-red-600"></span>
                    </div>

                    <div>
                        <label asp-for="Stock" class="block text-sm font-medium text-gray-700 mb-2">Số lượng tồn kho</label>
                        <input asp-for="Stock" type="number" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <span asp-validation-for="Stock" class="text-sm text-red-600"></span>
                    </div>

                    <div>
                        <label asp-for="DiscountId" class="block text-sm font-medium text-gray-700 mb-2">Chương trình giảm giá</label>
                        <select asp-for="DiscountId" asp-items="ViewBag.Discounts" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">-- Không áp dụng --</option>
                        </select>
                        <span asp-validation-for="DiscountId" class="text-sm text-red-600"></span>
                    </div>
                </div>
                
                <div class="mt-6">
                    <label asp-for="ShortDescription" class="block text-sm font-medium text-gray-700 mb-2">Mô tả ngắn</label>
                    <textarea asp-for="ShortDescription" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
                    <span asp-validation-for="ShortDescription" class="text-sm text-red-600"></span>
                </div>
                
                <div class="mt-6">
                    <label asp-for="DetailDescription" class="block text-sm font-medium text-gray-700 mb-2">Mô tả chi tiết</label>
                    <textarea asp-for="DetailDescription" rows="6" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
                    <span asp-validation-for="DetailDescription" class="text-sm text-red-600"></span>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-md p-6">
                <h3 class="text-xl font-semibold text-gray-800 mb-4">Hình ảnh theo màu sắc</h3>
                  <div id="colorContainer">
                    @{
                        var imagesGrouped = ViewBag.ProductImagesGrouped as Dictionary<int, List<ProductImage>>;
                        if (imagesGrouped == null)
                        {
                            imagesGrouped = new Dictionary<int, List<ProductImage>>();
                        }
                    }
                      @foreach (var colorGroup in imagesGrouped)
                    {
                        var colorId = colorGroup.Key;                        var images = colorGroup.Value;
                        
                        // Find color using traditional foreach instead of lambda
                        SelectListItem? color = null;
                        foreach (var c in ViewBag.Colors)
                        {
                            if (int.Parse(c.Value) == colorId)
                            {
                                color = c;
                                break;
                            }
                        }
                        var colorName = color?.Text ?? "Unknown";
                        
                        <div class="color-section mb-8 p-4 border border-gray-200 rounded-lg">
                            <div class="flex items-center gap-4 mb-4">
                                <select name="Colors" required class="color-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <option value="">-- Chọn màu --</option>
                                    @foreach (var colorOption in ViewBag.Colors)
                                    {                                        @if (int.Parse(colorOption.Value) == colorId)
                                        {
                                            <option value="@colorOption.Value" selected>@colorOption.Text</option>
                                        }
                                        else
                                        {
                                            <option value="@colorOption.Value">@colorOption.Text</option>
                                        }
                                    }
                                </select>
                                <button type="button" onclick="removeColorSection(this)" class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                    </svg>
                                </button>
                            </div>
                            
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Ảnh hiện có</label>
                                <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                                    @foreach (var image in images)
                                    {
                                        <div class="relative group">
                                            <img src="/Product/GetImage/@image.ImageId" alt="Product image" class="w-full h-32 object-cover rounded-lg border border-gray-300">
                                            <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg">
                                                <div class="flex space-x-2">
                                                    <input type="checkbox" name="KeepImage_@(colorId)_@(image.ImageId)" value="true" checked class="hidden keep-image-checkbox">
                                                    <button type="button" onclick="toggleKeepImage(this)" class="p-2 bg-gray-700 text-white rounded-full hover:bg-gray-600 keep-image-btn">
                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                                        </svg>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Thêm ảnh mới (có thể chọn nhiều)</label>
                                <div class="relative border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-blue-500 transition-colors">
                                    <input type="file" name="NewImages_@colorId" class="image-input absolute inset-0 w-full h-full opacity-0 cursor-pointer" accept="image/*" multiple>
                                    <div class="text-center">
                                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                        </svg>
                                        <p class="mt-1 text-sm text-gray-600">Kéo thả ảnh vào đây hoặc <span class="text-blue-500 font-medium">chọn ảnh</span></p>
                                        <p class="mt-1 text-xs text-gray-500">PNG, JPG lên đến 10MB</p>
                                    </div>
                                </div>
                                <div class="image-preview mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4"></div>
                            </div>
                        </div>
                    }
                </div>
                
                <button type="button" id="addColorBtn" class="mt-4 flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Thêm màu sắc
                </button>
            </div>
            
            <div class="flex justify-end space-x-4">
                <a href="/Product" class="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600">Hủy</a>
                <button type="submit" id="submitBtn" class="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Cập nhật sản phẩm</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            setupExistingColorSections();
            setupAddColorButton();
            setupFormValidation();
        });
        
        function setupExistingColorSections() {
            document.querySelectorAll('.color-section').forEach(section => {
                setupImagePreview(section);
                setupDragAndDrop(section);
            });
        }
        
        function setupAddColorButton() {
            document.getElementById('addColorBtn').addEventListener('click', function() {
                const colorContainer = document.getElementById('colorContainer');
                const colorSections = document.querySelectorAll('.color-section');
                const newIndex = colorSections.length;
                
                const newSection = document.createElement('div');
                newSection.className = 'color-section mb-8 p-4 border border-gray-200 rounded-lg';
                newSection.innerHTML = `
                    <div class="flex items-center gap-4 mb-4">
                        <select name="Colors" required class="color-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">-- Chọn màu --</option>
                            @foreach (var color in ViewBag.Colors)
                            {
                                <option value="@color.Value">@color.Text</option>
                            }
                        </select>
                        <button type="button" onclick="removeColorSection(this)" class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                        </button>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Thêm ảnh mới (có thể chọn nhiều)</label>
                        <div class="relative border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-blue-500 transition-colors">
                            <input type="file" name="NewImages_new_${newIndex}" class="image-input absolute inset-0 w-full h-full opacity-0 cursor-pointer" accept="image/*" multiple>
                            <div class="text-center">
                                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                <p class="mt-1 text-sm text-gray-600">Kéo thả ảnh vào đây hoặc <span class="text-blue-500 font-medium">chọn ảnh</span></p>
                                <p class="mt-1 text-xs text-gray-500">PNG, JPG lên đến 10MB</p>
                            </div>
                        </div>
                        <div class="image-preview mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4"></div>
                    </div>
                `;
                
                colorContainer.appendChild(newSection);
                setupImagePreview(newSection);
                setupDragAndDrop(newSection);
                updateColorSelectNames();
                validateForm();
            });
        }
        
        function updateColorSelectNames() {
            // When a new color is selected, update the file input name to include the color ID
            document.querySelectorAll('.color-section').forEach((section, index) => {
                const colorSelect = section.querySelector('.color-select');
                const fileInput = section.querySelector('.image-input');
                
                if (colorSelect && fileInput) {
                    // Update the event handler for color selection
                    colorSelect.addEventListener('change', function() {
                        if (this.value) {
                            fileInput.name = `NewImages_${this.value}`;
                        } else {
                            fileInput.name = `NewImages_new_${index}`;
                        }
                    });
                    
                    // Update immediately if there's already a value
                    if (colorSelect.value) {
                        fileInput.name = `NewImages_${colorSelect.value}`;
                    }
                }
            });
        }
        
        function removeColorSection(button) {
            const section = button.closest('.color-section');
            if (confirm('Bạn có chắc chắn muốn xóa phần này?')) {
                section.remove();
                validateForm();
            }
        }
        
        function setupImagePreview(section) {
            const fileInput = section.querySelector('.image-input');
            const previewContainer = section.querySelector('.image-preview');
            
            fileInput.addEventListener('change', function() {
                previewContainer.innerHTML = '';
                
                if (this.files) {
                    Array.from(this.files).forEach(file => {
                        if (!file.type.match('image.*')) return;
                        
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            const preview = document.createElement('div');
                            preview.className = 'relative group';
                            preview.innerHTML = `
                                <img src="${e.target.result}" alt="Preview" class="w-full h-32 object-cover rounded-lg border border-gray-300">
                                <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg">
                                    <button type="button" class="p-2 bg-red-500 text-white rounded-full hover:bg-red-600" onclick="removeImagePreview(this)">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                </div>
                            `;
                            previewContainer.appendChild(preview);
                        };
                        reader.readAsDataURL(file);
                    });
                }
                
                validateForm();
            });
        }
        
        function setupDragAndDrop(section) {
            const dropZone = section.querySelector('.relative.border-2');
            const fileInput = section.querySelector('.image-input');
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropZone.addEventListener(eventName, () => {
                    dropZone.classList.add('border-blue-500', 'bg-blue-50');
                }, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, () => {
                    dropZone.classList.remove('border-blue-500', 'bg-blue-50');
                }, false);
            });
            
            dropZone.addEventListener('drop', (e) => {
                const dt = e.dataTransfer;
                fileInput.files = dt.files;
                const event = new Event('change');
                fileInput.dispatchEvent(event);
            });
        }
        
        function removeImagePreview(button) {
            const imageContainer = button.closest('.relative.group');
            imageContainer.remove();
            validateForm();
        }
        
        function toggleKeepImage(button) {
            const container = button.closest('.relative.group');
            const checkbox = container.querySelector('.keep-image-checkbox');
            const img = container.querySelector('img');
            
            checkbox.checked = !checkbox.checked;
            
            if (checkbox.checked) {
                button.classList.remove('bg-red-500');
                button.classList.add('bg-gray-700');
                button.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
                img.classList.remove('opacity-50');
            } else {
                button.classList.remove('bg-gray-700');
                button.classList.add('bg-red-500');
                button.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
                img.classList.add('opacity-50');
            }
            
            validateForm();
        }
        
        function setupFormValidation() {
            const form = document.getElementById('productForm');
            
            // Validate on form submission
            form.addEventListener('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    alert('Vui lòng kiểm tra lại form trước khi gửi.');
                }
            });
            
            // Validate on any input change
            form.addEventListener('input', validateForm);
            
            // Initial validation
            validateForm();
        }
        
        function validateForm() {
            const form = document.getElementById('productForm');
            const submitBtn = document.getElementById('submitBtn');
            
            // Basic field validation
            const productName = form.querySelector('input[name="ProductName"]').value;
            const categoryId = form.querySelector('select[name="CategoryId"]').value;
            const price = form.querySelector('input[name="Price"]').value;
            const stock = form.querySelector('input[name="Stock"]').value;
            
            let isValid = productName && categoryId && price && stock;
            
            // Color sections validation
            const colorSections = form.querySelectorAll('.color-section');
            const selectedColors = new Set();
            
            for (const section of colorSections) {
                const colorSelect = section.querySelector('.color-select');
                
                // Check if a color is selected
                if (!colorSelect.value) {
                    isValid = false;
                } else if (selectedColors.has(colorSelect.value)) {
                    // Prevent duplicate colors
                    alert('Mỗi màu chỉ có thể được chọn một lần. Vui lòng kiểm tra lại.');
                    colorSelect.value = '';
                    isValid = false;
                } else {
                    selectedColors.add(colorSelect.value);
                }
                
                // For each color, make sure there are images (either existing or new)
                const hasExistingCheckedImages = Array.from(section.querySelectorAll('.keep-image-checkbox')).some(cb => cb.checked);
                const hasNewImages = section.querySelector('.image-input').files.length > 0;
                
                if (!hasExistingCheckedImages && !hasNewImages) {
                    isValid = false;
                }
            }
            
            // At least one color must be selected
            if (colorSections.length === 0) {
                isValid = false;
            }
            
            submitBtn.disabled = !isValid;
            return isValid;
        }
    </script>
}
