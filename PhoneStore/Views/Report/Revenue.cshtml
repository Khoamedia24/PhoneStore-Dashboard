@{
    ViewData["Title"] = "B√°o c√°o doanh thu";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Th√™m Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container mx-auto px-4 py-6 bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <!-- Header Section -->
    <div class="flex flex-col md:flex-row md:items-center justify-between mb-8 space-y-4 md:space-y-0">
        <div class="animate-fade-in">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                üìä B√°o c√°o doanh thu
            </h1>
            <p class="text-gray-600 mt-2 text-sm md:text-base">Ph√¢n t√≠ch chi ti·∫øt doanh thu v√† hi·ªáu su·∫•t kinh doanh</p>
        </div>
        <div class="flex space-x-3">
            <form asp-action="ExportRevenue" method="get" class="inline">
                <input type="hidden" name="startDate" value="@DateTime.Today.AddMonths(-12):yyyy-MM-dd" />
                <input type="hidden" name="endDate" value="@DateTime.Today:yyyy-MM-dd" />
                <button type="submit" class="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition duration-300 transform hover:scale-105 shadow-lg">
                    <i class="fas fa-file-excel mr-2"></i>
                    Xu·∫•t Excel
                </button>
            </form>
            <button onclick="showCustomExportModal()" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition duration-300 transform hover:scale-105 shadow-lg">
                <i class="fas fa-calendar-alt mr-2"></i>
                Xu·∫•t theo th·ªùi gian
            </button>
        </div>
    </div>

    <!-- Th·ªëng k√™ t·ªïng quan -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <!-- T·ªïng doanh thu -->
        <div class="bg-gradient-to-br from-green-500 to-green-600 text-white rounded-xl shadow-xl p-6 transform hover:scale-105 transition duration-300">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-green-100 text-sm font-medium uppercase tracking-wide">T·ªïng doanh thu</p>
                    <p class="text-2xl md:text-3xl font-bold mt-2">@String.Format("{0:N0}", ViewBag.TotalRevenue) ‚Ç´</p>
                </div>
                <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                    <i class="fas fa-dollar-sign text-2xl"></i>
                </div>
            </div>
        </div>

        <!-- Doanh thu th√°ng n√†y -->
        <div class="bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-xl shadow-xl p-6 transform hover:scale-105 transition duration-300">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-blue-100 text-sm font-medium uppercase tracking-wide">Doanh thu th√°ng n√†y</p>
                    <p class="text-2xl md:text-3xl font-bold mt-2">@String.Format("{0:N0}", ViewBag.MonthlyRevenue) ‚Ç´</p>
                </div>
                <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                    <i class="fas fa-calendar-month text-2xl"></i>
                </div>
            </div>
        </div>

        <!-- T·ªïng ƒë∆°n h√†ng -->
        <div class="bg-gradient-to-br from-purple-500 to-purple-600 text-white rounded-xl shadow-xl p-6 transform hover:scale-105 transition duration-300">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-purple-100 text-sm font-medium uppercase tracking-wide">T·ªïng ƒë∆°n h√†ng</p>
                    <p class="text-2xl md:text-3xl font-bold mt-2">@String.Format("{0:N0}", ViewBag.TotalOrders)</p>
                </div>
                <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                    <i class="fas fa-shopping-cart text-2xl"></i>
                </div>
            </div>
        </div>

        <!-- Gi√° tr·ªã ƒë∆°n h√†ng TB -->
        <div class="bg-gradient-to-br from-orange-500 to-orange-600 text-white rounded-xl shadow-xl p-6 transform hover:scale-105 transition duration-300">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-orange-100 text-sm font-medium uppercase tracking-wide">Gi√° tr·ªã TB/ƒê∆°n</p>
                    <p class="text-2xl md:text-3xl font-bold mt-2">@String.Format("{0:N0}", ViewBag.AverageOrderValue) ‚Ç´</p>
                </div>
                <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                    <i class="fas fa-chart-line text-2xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Bi·ªÉu ƒë·ªì doanh thu -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Bi·ªÉu ƒë·ªì doanh thu theo th√°ng -->
        <div class="bg-white rounded-xl shadow-xl overflow-hidden">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900">Doanh thu 12 th√°ng g·∫ßn ƒë√¢y</h3>
            </div>
            <div class="p-6">
                <div class="relative" style="height: 400px;">
                    <canvas id="monthlyRevenueChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Bi·ªÉu ƒë·ªì doanh thu theo ng√†y -->
        <div class="bg-white rounded-xl shadow-xl overflow-hidden">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900">Doanh thu 30 ng√†y g·∫ßn ƒë√¢y</h3>
            </div>
            <div class="p-6">
                <div class="relative" style="height: 400px;">
                    <canvas id="dailyRevenueChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Top s·∫£n ph·∫©m v√† danh m·ª•c -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Top s·∫£n ph·∫©m b√°n ch·∫°y -->
        <div class="bg-white rounded-xl shadow-xl overflow-hidden">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900">Top 10 s·∫£n ph·∫©m b√°n ch·∫°y</h3>
            </div>
            <div class="p-6">
                <div class="space-y-4">
                    @if (ViewBag.TopProducts != null)
                    {
                        @foreach (var product in ViewBag.TopProducts)
                        {
                            <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                                <div>
                                    <h4 class="font-medium text-gray-900">@product.ProductName</h4>
                                    <p class="text-sm text-gray-600">S·ªë l∆∞·ª£ng: @product.TotalQuantity</p>
                                </div>
                                <div class="text-right">
                                    <p class="font-semibold text-green-600">@String.Format("{0:N0}", product.TotalRevenue) ‚Ç´</p>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Doanh thu theo danh m·ª•c -->
        <div class="bg-white rounded-xl shadow-xl overflow-hidden">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900">Doanh thu theo danh m·ª•c</h3>
            </div>
            <div class="p-6">
                <div class="relative" style="height: 300px;">
                    <canvas id="categoryChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Top kh√°ch h√†ng -->
    <div class="bg-white rounded-xl shadow-xl overflow-hidden mb-8">
        <div class="p-6 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900">Top 10 kh√°ch h√†ng theo doanh s·ªë</h3>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Kh√°ch h√†ng</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">T·ªïng chi ti√™u</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">S·ªë ƒë∆°n h√†ng</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gi√° tr·ªã TB/ƒê∆°n</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @if (ViewBag.CustomerStats != null)
                    {
                        @foreach (var customer in ViewBag.CustomerStats)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900">@customer.CustomerName</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-semibold text-green-600">@String.Format("{0:N0}", customer.TotalSpent) ‚Ç´</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@customer.OrderCount</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@String.Format("{0:N0}", customer.AverageOrderValue) ‚Ç´</div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Th·ªëng k√™ theo th√°ng -->
    <div class="bg-white rounded-xl shadow-xl overflow-hidden">
        <div class="p-6 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900">Chi ti·∫øt th·ªëng k√™ theo th√°ng</h3>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Th√°ng/NƒÉm</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Doanh thu</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">S·ªë ƒë∆°n h√†ng</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gi√° tr·ªã TB/ƒê∆°n</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @if (ViewBag.MonthlyData != null)
                    {
                        @foreach (var month in ViewBag.MonthlyData)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900">@month.Month/@month.Year</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-semibold text-green-600">@String.Format("{0:N0}", month.Revenue) ‚Ç´</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@month.OrderCount</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@String.Format("{0:N0}", month.AverageOrderValue) ‚Ç´</div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal xu·∫•t b√°o c√°o t√πy ch·ªânh -->
<div id="customExportModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
            <h3 class="text-lg font-medium text-gray-900">Xu·∫•t b√°o c√°o theo th·ªùi gian</h3>
            <form asp-action="ExportRevenue" method="get" class="mt-4">
                <div class="mb-4">
                    <label for="startDate" class="block text-sm font-medium text-gray-700 mb-2">T·ª´ ng√†y:</label>
                    <input type="date" id="startDate" name="startDate" value="@DateTime.Today.AddMonths(-1):yyyy-MM-dd"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
                <div class="mb-4">
                    <label for="endDate" class="block text-sm font-medium text-gray-700 mb-2">ƒê·∫øn ng√†y:</label>
                    <input type="date" id="endDate" name="endDate" value="@DateTime.Today:yyyy-MM-dd"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
                <div class="flex justify-end space-x-4">
                    <button type="button" onclick="hideCustomExportModal()"
                            class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400">
                        H·ªßy
                    </button>
                    <button type="submit"
                            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                        Xu·∫•t Excel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Bi·ªÉu ƒë·ªì doanh thu theo th√°ng
            const monthlyCtx = document.getElementById('monthlyRevenueChart').getContext('2d');
            new Chart(monthlyCtx, {
                type: 'line',
                data: {
                    labels: [@Html.Raw(ViewBag.ChartMonths)],
                    datasets: [{
                        label: 'Doanh thu (VNƒê)',
                        data: [@Html.Raw(ViewBag.ChartRevenue)],
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        borderColor: 'rgba(59, 130, 246, 1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: 'rgba(59, 130, 246, 1)',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 6
                    }, {
                        label: 'S·ªë ƒë∆°n h√†ng',
                        data: [@Html.Raw(ViewBag.ChartOrders)],
                        backgroundColor: 'rgba(34, 197, 94, 0.1)',
                        borderColor: 'rgba(34, 197, 94, 1)',
                        borderWidth: 3,
                        fill: false,
                        tension: 0.4,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    if (context.datasetIndex === 0) {
                                        return 'Doanh thu: ' + context.raw.toLocaleString('vi-VN') + ' VNƒê';
                                    } else {
                                        return 'S·ªë ƒë∆°n h√†ng: ' + context.raw;
                                    }
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString('vi-VN');
                                }
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            grid: {
                                drawOnChartArea: false,
                            },
                            beginAtZero: true
                        }
                    }
                }
            });

            // Bi·ªÉu ƒë·ªì doanh thu theo ng√†y
            const dailyCtx = document.getElementById('dailyRevenueChart').getContext('2d');
            new Chart(dailyCtx, {
                type: 'bar',
                data: {
                    labels: [@Html.Raw(ViewBag.ChartDays)],
                    datasets: [{
                        label: 'Doanh thu (VNƒê)',
                        data: [@Html.Raw(ViewBag.ChartDailyRevenue)],
                        backgroundColor: 'rgba(147, 51, 234, 0.8)',
                        borderColor: 'rgba(147, 51, 234, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'Doanh thu: ' + context.raw.toLocaleString('vi-VN') + ' VNƒê';
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString('vi-VN');
                                }
                            }
                        }
                    }
                }
            });

            // Bi·ªÉu ƒë·ªì danh m·ª•c
            const categoryCtx = document.getElementById('categoryChart').getContext('2d');
            const categoryData = @Html.Raw(Json.Serialize(ViewBag.CategoryRevenue));
            new Chart(categoryCtx, {
                type: 'doughnut',
                data: {
                    labels: categoryData.map(item => item.categoryName),
                    datasets: [{
                        data: categoryData.map(item => item.totalRevenue),
                        backgroundColor: [
                            'rgba(59, 130, 246, 0.8)',
                            'rgba(34, 197, 94, 0.8)',
                            'rgba(251, 191, 36, 0.8)',
                            'rgba(239, 68, 68, 0.8)',
                            'rgba(147, 51, 234, 0.8)',
                            'rgba(236, 72, 153, 0.8)'
                        ],
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.label + ': ' + context.raw.toLocaleString('vi-VN') + ' VNƒê';
                                }
                            }
                        }
                    }
                }
            });
        });

        function showCustomExportModal() {
            document.getElementById('customExportModal').classList.remove('hidden');
        }

        function hideCustomExportModal() {
            document.getElementById('customExportModal').classList.add('hidden');
        }

        // Animation cho c√°c cards
        const cards = document.querySelectorAll('.transform');
        cards.forEach((card, index) => {
            card.style.animationDelay = `${index * 0.1}s`;
            card.classList.add('animate-fade-in');        });
    </script>

    <style>
        @@keyframes fade-in {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .animate-fade-in {
            animation: fade-in 0.6s ease-out forwards;
        }
    </style>
}
