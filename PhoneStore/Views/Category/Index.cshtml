@model IEnumerable<PhoneStore.Models.Category>
@{
    ViewData["Title"] = "Quản lý danh mục";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-800">Quản lý danh mục sản phẩm</h2>
            <button onclick="showAddModal()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
                Thêm danh mục mới
            </button>
        </div>

        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tên danh mục</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Số sản phẩm</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Thao tác</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var category in Model)
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap">@category.CategoryId</td>
                            <td class="px-6 py-4 whitespace-nowrap">@category.CategoryName</td>
                            <td class="px-6 py-4 whitespace-nowrap">@category.Products.Count</td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <button onclick="showEditModal(@category.CategoryId, '@category.CategoryName')" 
                                        class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-lg mr-2">
                                    Sửa
                                </button>
                                <button onclick="deleteCategory(@category.CategoryId)" 
                                        class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded-lg">
                                    Xóa
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal thêm/sửa danh mục -->
<div id="categoryModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 class="text-lg font-medium text-gray-900" id="modalTitle">Thêm danh mục mới</h3>
            <form id="categoryForm" class="mt-4">
                @Html.AntiForgeryToken()
                <input type="hidden" id="categoryId" name="categoryId" value="" />
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700">Tên danh mục</label>
                    <input type="text" id="categoryName" name="categoryName" required
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                </div>
                <div class="mt-5 flex justify-end">
                    <button type="button" onclick="closeModal()"
                            class="mr-3 px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400">
                        Hủy
                    </button>
                    <button type="submit"
                            class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                        Lưu
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showAddModal() {
            document.getElementById('modalTitle').textContent = 'Thêm danh mục mới';
            document.getElementById('categoryId').value = '';
            document.getElementById('categoryName').value = '';
            document.getElementById('categoryModal').classList.remove('hidden');
        }

        function showEditModal(id, name) {
            document.getElementById('modalTitle').textContent = 'Sửa danh mục';
            document.getElementById('categoryId').value = id;
            document.getElementById('categoryName').value = name;
            document.getElementById('categoryModal').classList.remove('hidden');
        }

        function closeModal() {
            document.getElementById('categoryModal').classList.add('hidden');
        }

        document.getElementById('categoryForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const id = document.getElementById('categoryId').value;
            const categoryName = document.getElementById('categoryName').value;

            if (!categoryName) {
                alert('Vui lòng nhập tên danh mục');
                return;
            }

            const data = {
                categoryId: id || 0,
                categoryName: categoryName
            };
            
            const url = id ? '/Category/Edit' : '/Category/Create';
            const method = id ? 'PUT' : 'POST';

            console.log('Sending request:', { url, method, data });

            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                console.log('Response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('Response data:', data);
                if (data.success) {
                    location.reload();
                } else {
                    alert(data.message || 'Có lỗi xảy ra');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra: ' + error.message);
            });
        });

        function deleteCategory(id) {
            if (!confirm('Bạn có chắc chắn muốn xóa danh mục này?')) {
                return;
            }

            fetch(`/Category/Delete/${id}`, {
                method: 'DELETE',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert(data.message || 'Có lỗi xảy ra khi xóa danh mục');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi xóa danh mục');
            });
        }
    </script>
}
